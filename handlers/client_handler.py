from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils import states, database
from config import developers, TOKEN, channel
from keyboards import client_kb

formClient = states.Client

base = database.DataBase()

client = Bot(TOKEN, parse_mode='HTML')

chat_members = ['LEFT', 'KICKED', 'RESTRICTED', 'BANNED'] # –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

router = Router()

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    check_member = await client.get_chat_member(chat_id=channel, user_id=message.from_user.id)

    if str(check_member.status).split('.')[-1] == "KICKED":
        return

    if str(check_member.status).split('.')[-1] in chat_members:
        return await message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª‚ùó\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ <a href="https://t.me/NaidiMeniaMckKtits">–∫–∞–Ω–∞–ª</a>.')
    
    await state.set_state(formClient.ptype)
    await message.answer('<b>üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n\n<b>–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å <i>—Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</i>, –Ω–æ –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ <u>—Ä—è–¥–∞ –ø—Ä–∞–≤–∏–ª</u>:</b>\n\n1Ô∏è‚É£ <b> –ü–æ—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ <u>–û–î–ù–£</u> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ <u>–ù–ï –ë–û–õ–¨–®–ï 20 –°–ï–ö–£–ù–î</u></b>\n(–Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)\n\n<b>‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>', reply_markup=client_kb.choose_type())


@router.message(formClient.ptype)
@router.callback_query(client_kb.Postination.filter()) # –ª—é—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def choose_post(query: CallbackQuery, callback_data: client_kb.Postination, state: FSMContext):
    if callback_data.action == "valentine":
        action = "#–≤–∞–ª–µ–Ω—Ç–∏–Ω"
        await query.message.delete_reply_markup()
        await query.message.edit_text("<b>–ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–ª—É—á—à–µ–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–µ–Ω—å –≤—Å–µ—Ö –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö</b>")
        await state.update_data(
            userid=query.from_user.id,
            post_type=action,
            media=[]
        )
        await query.answer()
        await state.set_state(formClient.array)
        return

    if callback_data.action == 'find':
        action = '#–Ω–∞–π–¥–∏_–º–µ–Ω—è'
    
    if callback_data.action == 'lost':
        action = '#–ø–æ—Ç–µ—Ä—è—à–∫–∞'


    if callback_data.action == 'tagless':
        action = ''
    
    await state.update_data(
        userid=query.from_user.id,
        post_type=action,
        media=[]
    )
    await query.message.delete_reply_markup()
    await query.message.edit_text('<b>üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n( –¢–ï–ö–°–¢ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å <i>–û–¢–î–ï–õ–¨–ù–û</i>, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - 3 )\n\n‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏,\n–Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞</b>')
    await query.answer()
    await state.set_state(formClient.array)


@router.message(formClient.array)
async def form_name(message: Message, state: FSMContext):

    data = await state.get_data()
    photos = data['media']

    if data['post_type'] == "#–≤–∞–ª–µ–Ω—Ç–∏–Ω":
        await base.add_valentine(data['userid'], message.text)
        await state.clear()
        return await message.answer("–Ω–∏—Ö—É—è –Ω–∏—Ö—É—è. –≤–∞–ª—è –ø–æ—à–µ–ª")
        

    if photos and message.text:
        await state.update_data(
            description=message.text
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏:', reply_markup=client_kb.anonim())
        return await state.set_state(formClient.anon)
    
    if message.text:
        await state.update_data(
            description=message.text,
            media=None
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏:', reply_markup=client_kb.anonim())
        return await state.set_state(formClient.anon)

    if len(photos) >= 3:
        return await message.answer('<b>‚ÄºÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ - <i>3</i>.</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    
    photos.append(message.photo[-1].file_id)
    await state.update_data(
        media = photos
    )


@router.message(formClient.anon)
@router.callback_query(client_kb.Anonimation.filter())
async def choose_anon(query: CallbackQuery, callback_data: client_kb.Anonimation, state: FSMContext):

    succes_message = '<b>‚úÖ –°–ø–∞—Å–∏–±–æ!</b>\n\n–ï—Å–ª–∏ –≤—ã <b><u>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</u></b> –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–æ, –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ <b><i>12 —á–∞—Å–æ–≤</i></b>.\n\n<b>–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫:</b>\n\n1Ô∏è‚É£ –í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–æ—Å—Ç\n2Ô∏è‚É£ –í–∞—à –ø–æ—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –∫–∞–Ω–∞–ª–∞\n3Ô∏è‚É£ –í–∞—à –ø–æ—Å—Ç –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ç–µ–∫—Å—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –æ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ—Å—Ç –µ—â–µ —Ä–∞–∑üëç\n\n<b>–ß—Ç–æ–±—ã –≤—ã–ª–æ–∂–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /start</b>'
    error_message = '<b>‚õî –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n–ù–µ–ª—å–∑—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <b><u>–ø—É–±–ª–∏—á–Ω–æ</u></b> –±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ <b><i>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è</i></b>'
    notify_message = '<b>üõéÔ∏è –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ <i>/pending</i> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π.</b>'

    data = await state.get_data()

    if callback_data.action == 'otkat':
        await state.clear()
        await query.message.delete_reply_markup()
        await query.answer()
        return await query.message.answer('‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')

    if callback_data.action == 'anon':
        await base.create_ticket(data=data, username='–∞–Ω–æ–Ω–∏–º')
        await query.message.delete_reply_markup()
        await query.message.edit_text(succes_message)
        await query.answer()
        list = await base.get_admins()
        for admin_id in list:
            await client.send_message(chat_id=admin_id, text=notify_message)
        return await state.clear()
    
    if not query.from_user.username:
        await query.message.delete_reply_markup()
        await query.message.edit_text(error_message)
        await query.answer()
        return await state.clear()
    
    await base.create_ticket(data=data, username=query.from_user.username)
    await query.message.delete_reply_markup()
    await query.message.edit_text(succes_message)
    await query.answer()
    list = await base.get_admins()
    for admin_id in list:
        await client.send_message(chat_id=admin_id, text=notify_message)
    await state.clear()